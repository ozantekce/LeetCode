package Restore_The_Array_1416;

import java.math.BigInteger;
import java.util.Arrays;

public class Solution {


    public static void main(String[] args) {

        //194014911
        System.out.println(numberOfArrays(""
                ,194014911));
    }

    public static int numberOfArrays(String s, int k) {

        long DP [] = new long[s.length()];
        int sToInt [] = new int[s.length()];

        boolean stp = false;
        for (int i = 0; i < s.length(); i++) {

            sToInt[i] = s.charAt(i)-48;
            if(!stp){
                BigInteger bi = new BigInteger(s.substring(0,i+1));
                boolean c = i+1>10 || bi.longValue()>k;
                if(!c){
                    DP[i] = 1;
                }else{
                    stp = true;
                }
            }
        }

        //System.out.println(Arrays.toString(values));
        //System.out.println(Arrays.toString(DP));

        for (int i = 0; i < s.length(); i++) {

            long addedValue =0;
            for (int shift = i+1; shift < s.length(); shift++) {

                if(s.charAt(i+1)=='0')
                    break;
                addedValue *=10;
                addedValue += sToInt[shift];

                if(addedValue>k || (shift-i)>=11)
                    break;
                //System.out.println("target: "+targetValue+" add:"+addedValue+" current :"+currentValue);
                DP[shift] += DP[i];
                DP[shift] %= 1000000007;

            }
            //System.out.println(Arrays.toString(DP));
        }
        //System.out.println(Arrays.toString(DP));
        return (int) DP[s.length()-1];

    }




    /*
    public static int numberOfArrays(String s, int k) {


        int length = s.length();
        BigInteger[][] DP = new BigInteger[length+1][length];
        for (int i = 0; i < DP.length; i++) {
            for (int j = 0; j < DP[0].length; j++) {
                DP[i][j] = new BigInteger("0");
            }
        }

        String [] values = new String[length];
        for (int i = 0; i < s.length(); i++) {
            values[i] = (s.substring(0,i+1));
        }


        //System.out.println(Arrays.toString(values));

        for (int i = 0; i < DP[1].length; i++) {
            BigInteger value = new BigInteger(values[i]);
            //System.out.println(BigInteger.valueOf(k).compareTo(value));
            if( (BigInteger.valueOf(k).compareTo(value) >= 0)
                && BigInteger.valueOf(0).compareTo(value) < 0)
                DP[1][i] = BigInteger.valueOf(1);
        }
        //System.out.println(Arrays.toString(DP[1]));
        BigInteger sum  = new BigInteger("0");
        for (int i = 1; i < DP.length; i++) {

            for (int j = i-1; j < DP[i].length; j++) {
                String targetValue = values[j];
                for (int l = 0; l < j; l++) {
                    String added = targetValue.replaceFirst(values[l],"");
                    //System.out.println(added);
                    BigInteger value = new BigInteger(added);
                    if( (BigInteger.valueOf(k).compareTo(value) >= 0)&& added.charAt(0)!='0')
                        DP[i][j]=DP[i][j].add(DP[i-1][l]);
                }

            }
            //System.out.println(DP[i][length-1]);
            sum = sum.add(DP[i][length-1]);
            //System.out.println(Arrays.toString(DP[i]));
        }

        //System.out.println(sum);
        String rtn = String.valueOf(sum.mod(new BigInteger("1000000007")));
        return Integer.parseInt(rtn);
    }
*/




    /*
    public static int numberOfArrays(String s, int k) {


        int length = s.length();
        BigInteger[][] DP = new BigInteger[length+1][length];
        for (int i = 0; i < DP.length; i++) {
            for (int j = 0; j < DP[0].length; j++) {
                DP[i][j] = BigInteger.ZERO;
            }
        }

        String [] values = new String[length];
        for (int i = 0; i < s.length(); i++) {
            values[i] = (s.substring(0,i+1));
        }


        //System.out.println(Arrays.toString(values));

        for (int i = 0; i < DP[1].length; i++) {
            BigInteger value = new BigInteger(values[i]);
            //System.out.println(BigInteger.valueOf(k).compareTo(value));
            if( (BigInteger.valueOf(k).compareTo(value) >= 0)
                && BigInteger.valueOf(0).compareTo(value) < 0){
                    DP[1][i] = BigInteger.ONE;
            }
        }
        //System.out.println(Arrays.toString(DP[1]));
        BigInteger sum  = BigInteger.ZERO;
        for (int i = 1; i < DP.length; i++) {

            for (int j = i-1; j < DP[i].length; j++) {
                String targetValue = values[j];
                for (int l = 0; l < j; l++) {
                    String added = targetValue.replaceFirst(values[l],"");

                    BigInteger value = new BigInteger(added);
                    if( (BigInteger.valueOf(k).compareTo(value) >= 0)&& added.charAt(0)!='0'){
                        DP[i][j]=DP[i][j].add(DP[i-1][l]);
                        System.out.println("old : "+values[l] +" added : "+added);
                    }

                }

            }
            //System.out.println(DP[i][length-1]);
            sum = sum.add(DP[i][length-1]);
            //System.out.println(Arrays.toString(DP[i]));
        }

        //System.out.println(sum);
        String rtn = String.valueOf(sum.mod(new BigInteger("1000000000")));
        return Integer.parseInt(rtn);
    }
*/
/*
    public static int numberOfArrays(String s, int k) {


        int length = s.length();
        int[][] DP = new int[length+1][length];

        int [] values = new int[length];
        for (int i = 0; i < s.length(); i++) {

            values[i] = (int) (Integer.parseInt(s.substring(0,i+1))* Math.pow(10,length-i-1));
        }
        System.out.println(Arrays.toString(values));

        for (int i = 0; i < DP[1].length; i++) {
            DP[1][i] = 1;
        }
        int sum = 0;
        for (int i = 1; i < DP.length; i++) {

            for (int j = 1; j < DP[i].length; j++) {
                DP[i][j] = DP[i][j-1] +DP[i-1][j-1];
            }
            sum+=DP[i][length-1];
            //System.out.println(Arrays.toString(DP[i]));
        }

        return sum;
    }
*/
}
